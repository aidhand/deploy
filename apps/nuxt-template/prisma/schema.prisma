generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String?
  slug      String    @unique
  email     String    @unique
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  bikes       Bike[]
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Bike {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  description  String?
  type         String?
  displacement Int?
  cylinders    Int?
  lams         Boolean?
  tags         BikeTag[]
  images       BikeImage[]
  reviews      BikeReview[]
  brand        Brand?        @relation(fields: [brandSlug], references: [slug])
  brandSlug    String?
  category     BikeCategory? @relation(fields: [categorySlug], references: [slug])
  categorySlug String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model BikeCategory {
  id               String         @id @default(uuid())
  name             String
  slug             String         @unique
  description      String?
  bikes            Bike[]
  subCategories    BikeCategory[] @relation("Subcategories")
  parentCategory   BikeCategory?  @relation("Subcategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model BikeTag {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  bikes       Bike[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BikeImage {
  id        String   @id @default(uuid())
  url       String
  bike      Bike     @relation(fields: [bikeId], references: [id])
  bikeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BikeReview {
  id        String   @id @default(uuid())
  rating    Int
  review    String?
  bike      Bike     @relation(fields: [bikeId], references: [id])
  bikeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String           @id @default(uuid())
  name         String
  slug         String           @unique
  description  String?
  type         String?
  tags         ProductTag[]
  images       ProductImage[]
  reviews      ProductReview[]
  brand        Brand?           @relation(fields: [brandSlug], references: [slug])
  brandSlug    String?
  category     ProductCategory? @relation(fields: [categorySlug], references: [slug])
  categorySlug String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProductCategory {
  id               String            @id @default(uuid())
  name             String
  slug             String            @unique
  description      String?
  products         Product[]
  subCategories    ProductCategory[] @relation("Subcategories")
  parentCategory   ProductCategory?  @relation("Subcategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ProductTag {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id        String   @id @default(uuid())
  rating    Int
  review    String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
